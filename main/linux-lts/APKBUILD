# Maintainer: Natanael Copa <ncopa@alpinelinux.org>
set -x

_flavor=lts
pkgname=linux-${_flavor}
pkgver=5.10.32
case $pkgver in
	*.*.*)	_kernver=${pkgver%.*};;
	*.*) _kernver=$pkgver;;
esac
pkgrel=0
pkgdesc="Linux lts kernel"
url="https://www.kernel.org"
depends="mkinitfs"
_depends_dev="perl gmp-dev elfutils-dev bash flex bison"
makedepends="$_depends_dev sed installkernel bc linux-headers linux-firmware-any openssl-dev
	diffutils findutils xz"
options="!strip"
_config=${config:-config-lts.${CARCH}}
install=
source="https://github.com/starfive-tech/linux/tarball/Fedora
	0002-powerpc-config-defang-gcc-check-for-stack-protector-.patch

	0007-pci-hotplug-declare-IDT-bridge-as-hotpluggabl-bridge.patch
	0008-pci-spr2803-quirk-to-fix-class-ID.patch
	ampere-mt-jade.patch

	config-lts.aarch64
	config-lts.armv7
	config-lts.x86
	config-lts.x86_64
	config-lts.ppc64le
	config-lts.s390x
	config-lts.mips64
        config-lts.riscv64

	config-virt.aarch64
	config-virt.armv7
	config-virt.ppc64le
	config-virt.x86
	config-virt.x86_64
	config-virt.riscv64
	config-small.riscv64
	"
subpackages="$pkgname-dev:_dev:$CBUILD_ARCH"
_flavors=
for _i in $source; do
	case $_i in
	config-*.$CARCH)
		_f=${_i%.$CARCH}
		_f=${_f#config-}
		_flavors="$_flavors ${_f}"
		if [ "linux-$_f" != "$pkgname" ]; then
			subpackages="$subpackages linux-${_f}::$CBUILD_ARCH linux-${_f}-dev:_dev:$CBUILD_ARCH"
		fi
		;;
	esac
done

if [ "${pkgver%.0}" = "$pkgver" ]; then
	source="$source
	https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/patch-$pkgver.xz"
fi
arch="all !armhf"
license="GPL-2.0"

_carch=${CARCH}
case "$_carch" in
aarch64*) _carch="arm64" ;;
arm*) _carch="arm" ;;
mips*) _carch="mips" ;;
ppc*) _carch="powerpc" ;;
s390*) _carch="s390" ;;
riscv64*) _carch="riscv" ;;
esac

prepare() {
	local _patch_failed=

	cd "$srcdir"
	tar xzf Fedora
	rm -rf linux-$_kernver
	mv starfive-tech-linux* linux-$_kernver

	cd "$srcdir"/linux-$_kernver

        rm -f localversion*
        oldconfig

	# ln -s  /aports/main/linux-lts/src/linux-5.10/drivers/net/wireless/broadcom/bcmdhd/include drivers/net/wireless/broadcom/bcmdhd/include
	return 0

	if [ "$_kernver" != "$pkgver" ]; then
		msg "Applying patch-$pkgver.xz"
		unxz -c < "$srcdir"/patch-$pkgver.xz | patch -p1 -N
	fi

	# first apply patches in specified order
	for i in $source; do
		case $i in
		*.patch)
			msg "Applying $i..."
			if ! patch -s -p1 -N -i "$srcdir"/$i; then
				echo $i >>failed
				_patch_failed=1
			fi
			;;
		esac
	done

	if ! [ -z "$_patch_failed" ]; then
		error "The following patches failed:"
		cat failed
		return 1
	fi

	# remove localversion from patch if any
	rm -f localversion*
	oldconfig
}

oldconfig() {
	for i in $_flavors; do
		local _config=config-$i.${CARCH}
		local _builddir="$srcdir"/build-$i.$CARCH
		mkdir -p "$_builddir"
		echo "-$pkgrel-$i" > "$_builddir"/localversion-alpine \
			|| return 1

		cp "$srcdir"/$_config "$_builddir"/.config
		make -C "$srcdir"/linux-$_kernver \
			O="$_builddir" \
			ARCH="$_carch" \
			listnewconfig oldconfig
	done
}

build() {
	unset LDFLAGS
	export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"
	for i in $_flavors; do
		cd "$srcdir"/build-$i.$CARCH
		make ARCH="$_carch" CC="${CC:-gcc}" \
			KBUILD_BUILD_VERSION="$((pkgrel + 1 ))-Alpine"
	done
}

_package() {
	local _buildflavor="$1" _outdir="$2"
	local _abi_release=${pkgver}-${pkgrel}-${_buildflavor}
	export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

	cd "$srcdir"/build-$_buildflavor.$CARCH
	# modules_install seems to regenerate a defect Modules.symvers on s390x. Work
	# around it by backing it up and restore it after modules_install
	mkdir -p "$_outdir"/boot "$_outdir"/lib/modules
	if [ -f Module.symvers ]; then
		cp Module.symvers Module.symvers.backup
		local _install
		case "$CARCH" in
			arm*|aarch64) _install="zinstall dtbs_install";;
			*) _install=install;;
		esac

		make -j16 modules_install $_install \
			ARCH="$_carch" \
			INSTALL_MOD_PATH="$_outdir" \
			INSTALL_PATH="$_outdir"/boot \
			INSTALL_DTBS_PATH="$_outdir/boot/dtbs-$_buildflavor"

		cp Module.symvers.backup Module.symvers
	fi
	rm -f "$_outdir"/lib/modules/${_abi_release}/build \
		"$_outdir"/lib/modules/${_abi_release}/source
	rm -rf "$_outdir"/lib/firmware

	install -D include/config/kernel.release \
		"$_outdir"/usr/share/kernel/$_buildflavor/kernel.release
}

# main flavor installs in $pkgdir
package() {
	depends="$depends linux-firmware-any"

	_package lts "$pkgdir"
}

# subflavors install in $subpkgdir
virt() {
	_package virt "$subpkgdir"
}

# subflavors install in $subpkgdir
small() {
	_package small "$subpkgdir"
}

_dev() {
	local _flavor=$(echo $subpkgname | sed -E 's/(^linux-|-dev$)//g')
	local _abi_release=${pkgver}-${pkgrel}-$_flavor
	# copy the only the parts that we really need for build 3rd party
	# kernel modules and install those as /usr/src/linux-headers,
	# simlar to what ubuntu does
	#
	# this way you dont need to install the 300-400 kernel sources to
	# build a tiny kernel module
	#
	pkgdesc="Headers and script for third party modules for $_flavor kernel"
	depends="$_depends_dev"
	local dir="$subpkgdir"/usr/src/linux-headers-${_abi_release}
	export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

	# first we import config, run prepare to set up for building
	# external modules, and create the scripts
	mkdir -p "$dir"
	cp "$srcdir"/config-$_flavor.${CARCH} "$dir"/.config
	echo "-$pkgrel-$_flavor" > "$dir"/localversion-alpine

	make -j1 -C "$srcdir"/linux-$_kernver O="$dir" ARCH="$_carch" \
		syncconfig prepare modules_prepare scripts || :

	# remove the stuff that points to real sources. we want 3rd party
	# modules to believe this is the soruces
	rm "$dir"/Makefile "$dir"/source

	# copy the needed stuff from real sources
	#
	# this is taken from ubuntu kernel build script
	# http://kernel.ubuntu.com/git/ubuntu/ubuntu-zesty.git/tree/debian/rules.d/3-binary-indep.mk
	cd "$srcdir"/linux-$_kernver
	find .  -path './include/*' -prune \
		-o -path './scripts/*' -prune -o -type f \
		\( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o \
		   -name '*.sh' -o -name '*.pl' -o -name '*.lds' -o -name 'Platform' \) \
		-print | cpio -pdm "$dir"

	cp -a scripts include "$dir"

	find $(find arch -name include -type d -print) -type f \
		| cpio -pdm "$dir"

	mkdir -p "$subpkgdir"/lib/modules/${_abi_release}
	if [ -f "$srcdir/build-$_flavor.$CARCH/Module.symvers" ]; then
		install -Dm644 "$srcdir"/build-$_flavor.$CARCH/Module.symvers \
			"$dir"/Module.symvers

		ln -sf /usr/src/linux-headers-${_abi_release} \
			"$subpkgdir"/lib/modules/${_abi_release}/build
	fi
}

# 95bc137d0cf9148da6a9d1f1a878698dc27b40f68e22c597544010a6c591ce1b256f083489d3ff45ff77753289b535135590194d88ef9f007d0ddab3d74de70e  linux-5.10.tar.xz

sha512sums="fb31bc5ec6339bd807557c025bc5906c9c0026fc886a120c505825ce9a6f574e895e211ddb002b676523e4eb26ef907b183f36ed2cdf214c978f01092ea6232e  Fedora
d19365fe94431008768c96a2c88955652f70b6df6677457ee55ee95246a64fdd2c6fed9b3bef37c29075178294a7fc91f148ead636382530ebfa822be4ad8c2f  0002-powerpc-config-defang-gcc-check-for-stack-protector-.patch
ca5aafac37e0b5f3fcbaf801e12f98beb58ffaf1d8c88f76caff22b059831869b4094e7fdcb6d6860422d6b2d036e072caff460e1feb84bd04d10740ad56265b  0007-pci-hotplug-declare-IDT-bridge-as-hotpluggabl-bridge.patch
cbe85cf34e8420c91d2276c2d2aa0ab5023af68e57a1fa613f073f16a76766c67f585eda71c28f232bd0625e0dc8275a9eddc95f49409205dc0dbcc28c9fac1c  0008-pci-spr2803-quirk-to-fix-class-ID.patch
16b2d5b0255b37075ba894fc797673d633395907ce0b93400c5a8bd05b512b5cd040b91000fa41f9240d42afc664a69206597d1e3f754a1aa64b9be21a67f5c6  ampere-mt-jade.patch
9b6e2988f819ab234380b7e7899732e53e4403577abb8dc7d4792ce5004fa5a786ef16c245e603f06ae58677f954e2354bd7578d89c6c99dd0bd531c28f1267a  config-lts.aarch64
e9acae08bfbbdf1227544c7e635232a7037d945f0bc6cc316361092a18f0a8cc1326979bed7b948d5284d25d3e0ade77d2a04494933886d5c4b37d5aae1c8427  config-lts.armv7
fd4e6ecfa98a7f74a384089b07802f40f30a70300cd466b30a5343b3594cf20679ac6c4f80ea815987ce1deff92d75039d6692ba9e3ad85035878e2a360d43eb  config-lts.x86
f370f92e35a8815229e52eec5a5e9c4d15ab01c8e7afa13e9672b6b1d1e0eaeb1379347fe92ae172d61bb749d5ebe53dee2c4f1a3062b144befc3a7339502bb0  config-lts.x86_64
46b44a0dc3ceb85f081bc04bacfab12f9e5e701eeeff89281af8123a2061afb4012194c9d5c5365c1391c95bdcdc12e641436458000c6b145024072e676c9eec  config-lts.ppc64le
b0aa02a11f6f8d88b83d8a615d0fa182e8033bc1543e94099030dd777d9930876ab1b3b4ffee60cf4efda92860a9755f939226c5b5bec69317a47284866dea55  config-lts.s390x
06148ae8d49127dd17a3b5cbe8e09bb4e3b95a85a9b372d6a2753a59c1c9caf5639dce865f3bab36da58c8fdcebe52483d7b0c785fdf15e3b71d6fc59c61c6c6  config-lts.mips64
51641134ca2954bdccdc3986c9b1d8b13d559ed26fd6ce0a78630901b592aebef3aeda7087c461b02aa6033e4a63ed1e64a2faf145230681e167ac6ec7b55f86  config-lts.riscv64
8fcfe68a15d4316d4cb8bddfc2fa82b9ef96c773a8a16b6347bddd8a2e399187dbf3facb8b7df26795a28d2c55db9e9a12b94a5021d7de251e52db32a0fc7071  config-virt.aarch64
b4799566dbb0ea7813647c965937c72a40afe60e535a29fb94b8343170e2272c73c27c68568ab296bb6351dfdedd28d0bc2e0000e378afe9c90d7a20a2cc86b5  config-virt.armv7
a795ab637ba2d84da8f1475bbac4600b59370c277b788fd58b3b28cb3dccf3d3d19b0d5196d915ccfb46c95a2ee20b4626401ee3ee05a54ee17c59bef963142e  config-virt.ppc64le
00aef9f7f596be069eba7b5c3ed23d2b057a35d8c9d3b0d54f562a3460302583164baade001f971c9deb16fd8b7bdd36bdc1e7aa0a1fbed75dc55a1f3e3e8e4f  config-virt.x86
bf8bf531cc6fd1d2d80eda1129b67bd28a7f04c7e893d6ef4d52dcd5f9bcc9b9e712efe205f0f6b2d32a8a23e19670e9498a636e6dc4e9b6f920e1ee253582b7  config-virt.x86_64
e9d5a1128ef5ae0e6d2fc675c8b0507761c577d6147c8a66072bf1953ff3b4921de8b1c350f643f42f07526cceab3556c24173676e6116d8165d2534f087a7b4  config-virt.riscv64
78e4fdb688369268b2cf5f9f3a798d565f5747ab1669682e07d0360926d79e50077e02a43ec3afbcc50838e0eadf4501c84b223ed28b7451b414554d4fcbac81  config-small.riscv64
2fa2457c4030e988b5f21fe18dff0c4388d54f53b5d64431ada02bbc491908e9a1edb99e8c2ecd42c1945518eb8b4a8928c961a81ccc502c0a5e9945de27d7de  patch-5.10.32.xz"


